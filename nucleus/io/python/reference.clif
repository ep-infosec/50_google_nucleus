# Copyright 2018 Google LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from "nucleus/protos/fasta_pyclif.h" import *
from "nucleus/protos/range_pyclif.h" import *
from "nucleus/protos/reference_pyclif.h" import *
from "nucleus/vendor/statusor_clif_converters.h" import *

from nucleus.io.clif_postproc import WrappedReferenceIterable

from "nucleus/io/reference.h":
  namespace `nucleus`:
    class GenomeReferenceRecordIterable:
      def Next(self) -> (not_done: StatusOr<bool>, fasta: tuple<str, str>)
      def Release(self) -> Status
      @__enter__
      def PythonEnter(self) -> Status
      @__exit__
      def PythonExit(self) -> Status

    class GenomeReference:
      contig_names: list<str> = property(`ContigNames`)
      def `Contig` as contig(self, chrom: str) -> StatusOr<ContigInfo>
      def `GetBases` as bases(self, region: Range) -> StatusOr<str>
      def `Iterate` as iterate(self) -> StatusOr<GenomeReferenceRecordIterable>:
        return WrappedReferenceIterable(...)
      def `HasContig` as has_contig(self, contig_name: str) -> bool
      def `IsValidInterval` as is_valid_interval(self, region: Range) -> bool

      # These are pure virtual superclass methods but including these above
      # results in a linker error.
      contigs: list<ContigInfo> = property(`Contigs`)

      @__enter__
      def PythonEnter(self) -> Status
      @__exit__
      def Close(self) -> Status

    class IndexedFastaReader(GenomeReference):
      @classmethod
      def `FromFile` as from_file(cls,
                                  fasta_path: str,
                                  fai_path: str,
                                  options: FastaReaderOptions,
                                  cache_size_bases: int = default)
        -> StatusOr<IndexedFastaReader>

    class UnindexedFastaReader(GenomeReference):
      @classmethod
      def `FromFile` as from_file(cls,
                                  fasta_path: str)
        -> StatusOr<UnindexedFastaReader>

    class InMemoryFastaReader(GenomeReference):
      @classmethod
      def `Create` as create(cls, contigs: list<ContigInfo>, seqs: list<ReferenceSequence>)
        -> StatusOr<InMemoryFastaReader>

      reference_sequences: dict<str, ReferenceSequence> = property(`ReferenceSequences`)
