# Copyright 2018 Google LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from "nucleus/protos/range_pyclif.h" import *
from "nucleus/protos/reference_pyclif.h" import *
from "nucleus/protos/variants_pyclif.h" import *
from "nucleus/util/proto_clif_converter.h" import *
from "nucleus/vendor/statusor_clif_converters.h" import *

from nucleus.io.clif_postproc import ValueErrorOnFalse
from nucleus.io.clif_postproc import WrappedVariantIterable


from "nucleus/io/vcf_reader.h":
  namespace `nucleus`:

    class VariantIterable:
      def PythonNext(self, variant: EmptyProtoPtr<Variant>) -> StatusOr<bool>
      def Release(self) -> Status
      @__enter__
      def PythonEnter(self) -> Status
      @__exit__
      def PythonExit(self) -> Status

    class VcfReader:
      @classmethod
      def `FromFile` as from_file(cls, variantsPath: str, options: VcfReaderOptions)
        -> StatusOr<VcfReader>

      @classmethod
      def `FromFileWithHeader` as from_file_with_header(cls, variantsPath: str, options: VcfReaderOptions, header: VcfHeader)
        -> StatusOr<VcfReader>

      def `Iterate` as iterate(self) -> StatusOr<VariantIterable>:
        return WrappedVariantIterable(...)
      def `Query` as query(self, region: Range) -> StatusOr<VariantIterable>:
        return WrappedVariantIterable(...)

      def `FromStringPython` as from_string(self, vcf_line: str) -> (status: StatusOr<bool>, variant: Variant):
        # If status is an error object, the statusor_clif_converters
        # will have already converted it into a Python error message.
        # We call ValueErrorOnFalse here so that users only see a single
        # return object (the Variant).
        return ValueErrorOnFalse(...)

      @__enter__
      def PythonEnter(self) -> Status
      @__exit__
      def Close(self) -> Status
      header: VcfHeader = property(`Header`)
